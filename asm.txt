.MODEL SMALL
.STACK 100H

.DATA
NUMBER DB "00000$"

.CODE

foo PROC

	PUSH BP
	MOV BP , SP
	PUSH BP
	MOV BX, 6
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	ADD CX, AX

	PUSH CX
	MOV CX, 5
	POP AX
	CMP AX,CX
		JLE L4
	JMP L3
L4:
	MOV CX, 7
	MOV DX,CX
	JMP L1
L5:
L3:
	PUSH BP
	MOV BX, 6
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 2
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 1
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	CALL foo
	MOV CX, DX

	PUSH CX
	MOV CX, 2
	PUSH CX
	PUSH BP
	MOV BX, 6
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 1
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 2
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	CALL foo
	MOV CX, DX
	POP AX
	IMUL CX
	MOV CX, AX
	POP AX
	ADD CX, AX
	MOV DX,CX
	JMP L1
L2:
L1:

	MOV SP , BP
	POP BP
	RET 4

foo ENDP

main PROC

	MOV AX , @DATA
	MOV DS , AX

	PUSH BP
	MOV BP , SP

	SUB SP , 6
L12:
	MOV CX, 7
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L11:
	MOV CX, 3
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L10:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH CX
	CALL foo
	MOV CX, DX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L9:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L8:
	MOV CX, 0
	MOV DX,CX
	JMP L6
L7:
L6:

	MOV SP , BP
	POP BP

	MOV AH , 4CH
	INT 21H

MAIN ENDP
new_line proc
	push ax
	push dx
	mov ah,2
	mov dl,0Dh
	int 21h
	mov ah,2
	mov dl,0Ah
	int 21h
	pop dx
	pop ax
	ret
	new_line endp
 print_output proc  ;print what is in ax
	push ax
	push bx
	push cx
	push dx
	push si
	lea si,number
	mov bx,10
	add si,4
	cmp ax,0
	jnge negate
	print:
	xor dx,dx
	div bx
	mov [si],dl
	add [si],'0'
	dec si
	cmp ax,0
	jne print
	inc si
	lea dx,si
	mov ah,9
	int 21h
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	ret
	negate:
	push ax
	mov ah,2
	mov dl,'-'
	int 21h
	pop ax
	neg ax
	jmp print
print_output endp
END MAIN
