.MODEL SMALL
.STACK 100H

.DATA
arr DW 5 DUP (0000H)
a DW 1 DUP (0000H)
NUMBER DB "00000$"

.CODE

f PROC

	PUSH BP
	MOV BP , SP
	PUSH BP
	MOV BX, 8
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L9:
	PUSH BP
	MOV BX, 6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L8:
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L7:
	MOV CX, 441
	PUSH CX
	MOV CX, 1
	LEA SI, arr
	ADD SI, CX
	ADD SI, CX
	PUSH BP
	MOV BP, SI
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L6:
	MOV CX, 555
	PUSH CX
	MOV CX, 0
	LEA SI, arr
	ADD SI, CX
	ADD SI, CX
	PUSH BP
	MOV BP, SI
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L5:
	MOV CX, 1
	LEA SI, arr
	ADD SI, CX
	ADD SI, CX
	PUSH BP
	MOV BP, SI
	MOV CX, [BP]
	POP BP
	PUSH CX
	PUSH BP
	MOV BX, 6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L4:
	PUSH BP
	MOV BX, 6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L3:
	MOV CX, 0
	LEA SI, arr
	ADD SI, CX
	ADD SI, CX
	PUSH BP
	MOV BP, SI
	MOV CX, [BP]
	POP BP
	MOV DX,CX
	JMP L1
L2:
L1:

	MOV SP , BP
	POP BP
	RET 6

f ENDP

recursive PROC

	PUSH BP
	MOV BP , SP
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 1
	POP AX
	CMP AX,CX
		JE L14
	JMP L13
L14:
	MOV CX, 1
	MOV DX,CX
	JMP L10
L13:
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 0
	POP AX
	CMP AX,CX
		JE L15
	JMP L12
L15:
	MOV CX, 0
	MOV DX,CX
	JMP L10
L12:
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 1
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	CALL recursive
	MOV CX, DX

	PUSH CX
	PUSH BP
	MOV BX, 4
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 2
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	CALL recursive
	MOV CX, DX
	POP AX
	ADD CX, AX
	MOV DX,CX
	JMP L10
L11:
L10:

	MOV SP , BP
	POP BP
	RET 2

recursive ENDP

v PROC

	PUSH BP
	MOV BP , SP
	MOV CX, 3
	MOV a , CX
L19:
	MOV CX ,a
	CMP CX , 0
	JE L18
	JMP L20
L20:

	SUB SP , 2
L23:
	MOV CX, 1
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L22:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L21:
L18:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L17:
L16:

	MOV SP , BP
	POP BP
	RET

v ENDP

main PROC

	MOV AX , @DATA
	MOV DS , AX

	PUSH BP
	MOV BP , SP

	SUB SP , 18
L76:
	MOV CX, 5
	PUSH CX
	PUSH BP
	MOV BX, -8
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L75:
	CALL v
	MOV CX, DX
L74:
	PUSH BP
	MOV BX, -8
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L73:
	MOV CX, 0
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L77:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 5
	POP AX
	CMP AX,CX
		JL L78
	JMP L72
L78:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 1
	POP AX
	ADD CX, AX
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH BP
	MOV BX, CX
	ADD BX, BX
	ADD BX, -10
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L80:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	MOV AX, CX
	INC CX
	MOV [BP], CX
	POP BP
	MOV CX, AX

	JMP L77
L72:
	MOV CX, 4
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L71:
L81:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	MOV AX, CX
	DEC CX
	MOV [BP], CX
	POP BP
	MOV CX, AX
	CMP CX , 0
	JE L70
	JMP L82
L82:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH BP
	MOV BX, CX
	ADD BX, BX
	ADD BX, -10
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L84:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L83:

	JMP L81
L70:
	MOV CX, 2
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L69:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 0
	POP AX
	CMP AX,CX
		JG L86
	JMP L85
L86:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	MOV AX, CX
	INC CX
	MOV [BP], CX
	POP BP
	MOV CX, AX
	JMP L68
L85:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	MOV AX, CX
	DEC CX
	MOV [BP], CX
	POP BP
	MOV CX, AX
L68:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L67:
	MOV CX, 2
	NEG CX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L66:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	MOV CX, 0
	POP AX
	CMP AX,CX
		JL L88
	JMP L87
L88:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	MOV AX, CX
	INC CX
	MOV [BP], CX
	POP BP
	MOV CX, AX
	JMP L65
L87:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	MOV AX, CX
	DEC CX
	MOV [BP], CX
	POP BP
	MOV CX, AX
L65:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L64:
	MOV CX, 121
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L63:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	NEG CX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L62:
	MOV CX, 5
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L61:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	ADD CX, AX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L60:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L59:
	MOV CX, 4
	NEG CX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L58:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH CX
	MOV CX, 4
	POP AX
	IMUL CX
	MOV CX, AX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L57:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L56:
	MOV CX, 19
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L55:
	MOV CX, 4
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L54:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	CWD
	IDIV CX
	MOV CX, AX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L53:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L52:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	CWD
	IDIV CX
	MOV CX, DX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L51:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L50:
	MOV CX, 111
	PUSH CX
	MOV CX, 222
	PUSH CX
	MOV CX, 333
	PUSH CX
	CALL f
	MOV CX, DX

	PUSH CX
	MOV CX, 444
	POP AX
	SUB AX, CX
	MOV CX, AX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L49:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L48:
	MOV CX, 5
	PUSH CX
	CALL recursive
	MOV CX, DX
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L47:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L46:
	MOV CX, 2
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L45:
	MOV CX, 1
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L44:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	CMP AX, 0
	JE L90
	JMP L91
L90:
	JCXZ L92
L91:
	MOV CX, 1
	JMP L93
L92:
	MOV CX, 0
L93:
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L43:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L42:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	CMP AX, 0
	JE L95
	JCXZ L95
	JMP L96
L95:
	MOV CX, 0
	JMP L97
L96:
	MOV CX, 1
L97:
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L41:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L40:
	MOV CX, 2
	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L39:
	MOV CX, 0
	PUSH CX
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L38:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	CMP AX, 0
	JE L99
	JMP L100
L99:
	JCXZ L101
L100:
	MOV CX, 1
	JMP L102
L101:
	MOV CX, 0
L102:
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L37:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L36:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L35:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L34:
	PUSH BP
	MOV BX, -2
	ADD BP, BX
	MOV CX, [BP]
	POP BP

	PUSH CX
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	POP AX
	CMP AX, 0
	JE L104
	JCXZ L104
	JMP L105
L104:
	MOV CX, 0
	JMP L106
L105:
	MOV CX, 1
L106:
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L33:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L32:
	PUSH BP
	MOV BX, -6
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	JCXZ L108
	MOV CX,0
	JMP L107
L108:
	MOV CX,1
L107:
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L31:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L30:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV CX, [BP]
	POP BP
	JCXZ L110
	MOV CX,0
	JMP L109
L110:
	MOV CX,1
L109:
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L29:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L28:
	MOV CX, 12

	PUSH CX
	MOV CX, 2
	PUSH CX
	MOV CX, 89
	POP AX
	CWD
	IDIV CX
	MOV CX, AX
	PUSH CX
	MOV CX, 3

	PUSH CX
	MOV CX, 33
	POP AX
	SUB AX, CX
	MOV CX, AX

	PUSH CX
	MOV CX, 64
	PUSH CX
	MOV CX, 2
	POP AX
	IMUL CX
	MOV CX, AX
	POP AX
	ADD CX, AX
	POP AX
	CWD
	IDIV CX
	MOV CX, DX
	POP AX
	ADD CX, AX

	PUSH CX
	MOV CX, 3
	POP AX
	SUB AX, CX
	MOV CX, AX

	PUSH CX
	MOV CX, 3

	PUSH CX
	MOV CX, 59
	PUSH CX
	MOV CX, 9
	POP AX
	CWD
	IDIV CX
	MOV CX, AX
	PUSH CX
	MOV CX, 2
	POP AX
	IMUL CX
	MOV CX, AX
	POP AX
	ADD CX, AX

	PUSH CX
	MOV CX, 4
	POP AX
	SUB AX, CX
	MOV CX, AX
	POP AX
	ADD CX, AX
	PUSH CX
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	POP AX
	POP CX
	MOV [BP], CX
	MOV BP, AX
L27:
	PUSH BP
	MOV BX, -4
	ADD BP, BX
	MOV AX, [BP]
	CALL print_output
	CALL new_line
	POP BP
L26:
	MOV CX, 0
	MOV DX,CX
	JMP L24
L25:
L24:

	MOV SP , BP
	POP BP

	MOV AH , 4CH
	INT 21H

MAIN ENDP
new_line proc
	push ax
	push dx
	mov ah,2
	mov dl,0Dh
	int 21h
	mov ah,2
	mov dl,0Ah
	int 21h
	pop dx
	pop ax
	ret
	new_line endp
 print_output proc  ;print what is in ax
	push ax
	push bx
	push cx
	push dx
	push si
	lea si,number
	mov bx,10
	add si,4
	cmp ax,0
	jnge negate
	print:
	xor dx,dx
	div bx
	mov [si],dl
	add [si],'0'
	dec si
	cmp ax,0
	jne print
	inc si
	lea dx,si
	mov ah,9
	int 21h
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	ret
	negate:
	push ax
	mov ah,2
	mov dl,'-'
	int 21h
	pop ax
	neg ax
	jmp print
print_output endp
END MAIN
