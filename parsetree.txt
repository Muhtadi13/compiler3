start : program 	<Line: 1-11>
 program : program unit 	<Line: 1-11>
  program : program unit 	<Line: 1-10>
   program : unit  	<Line: 1-4>
    unit : func_definition  	<Line: 1-4>
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 1-4>
      type_specifier	: INT 	<Line: 1-1>
       INT : int 	<Line: 1-1>
      ID : haha 	<Line: 1-1>
      LPAREN : ( 	<Line: 1-1>
      parameter_list  : type_specifier ID 	<Line: 1-1>
       type_specifier	: INT 	<Line: 1-1>
        INT : int 	<Line: 1-1>
       ID : p 	<Line: 1-1>
      RPAREN : ) 	<Line: 1-1>
      compound_statement : LCURL statements RCURL 	<Line: 1-4>
       LCURL : { 	<Line: 1-1>
       statements : statements statement 	<Line: 2-3>
        statements : statement 	<Line: 2-2>
         statement : var_declaration 	<Line: 2-2>
          var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
           type_specifier	: INT 	<Line: 2-2>
            INT : int 	<Line: 2-2>
           declaration_list : declaration_list COMMA ID 	<Line: 2-2>
            declaration_list : ID 	<Line: 2-2>
             ID : te 	<Line: 2-2>
            COMMA : , 	<Line: 2-2>
            ID : th 	<Line: 2-2>
           SEMICOLON : ; 	<Line: 2-2>
        statement : expression_statement 	<Line: 3-3>
         expression_statement 	: expression SEMICOLON 	<Line: 3-3>
          expression : variable ASSIGNOP logic_expression 	<Line: 3-3>
           variable : ID 	<Line: 3-3>
            ID : te 	<Line: 3-3>
           ASSIGNOP : = 	<Line: 3-3>
           logic_expression : rel_expression  	<Line: 3-3>
            rel_expression : simple_expression  	<Line: 3-3>
             simple_expression : term 	<Line: 3-3>
              term : unary_expression 	<Line: 3-3>
               unary_expression : factor 	<Line: 3-3>
                factor  : CONST_INT 	<Line: 3-3>
                 CONST_INT : 5 	<Line: 3-3>
          SEMICOLON : ; 	<Line: 3-3>
       RCURL : } 	<Line: 4-4>
   unit : func_definition  	<Line: 5-10>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 5-10>
     type_specifier	: INT 	<Line: 5-5>
      INT : int 	<Line: 5-5>
     ID : main 	<Line: 5-5>
     LPAREN : ( 	<Line: 5-5>
     RPAREN : ) 	<Line: 5-5>
     compound_statement : LCURL statements RCURL 	<Line: 5-10>
      LCURL : { 	<Line: 5-5>
      statements : statements statement 	<Line: 6-9>
       statements : statements statement 	<Line: 6-8>
        statements : statements statement 	<Line: 6-7>
         statements : statement 	<Line: 6-6>
          statement : var_declaration 	<Line: 6-6>
           var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 6-6>
            type_specifier	: INT 	<Line: 6-6>
             INT : int 	<Line: 6-6>
            declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 6-6>
             declaration_list : declaration_list COMMA ID 	<Line: 6-6>
              declaration_list : declaration_list COMMA ID 	<Line: 6-6>
               declaration_list : ID 	<Line: 6-6>
                ID : x 	<Line: 6-6>
               COMMA : , 	<Line: 6-6>
               ID : y 	<Line: 6-6>
              COMMA : , 	<Line: 6-6>
              ID : z 	<Line: 6-6>
             COMMA : , 	<Line: 6-6>
             ID : k 	<Line: 6-6>
             LSQUARE : [ 	<Line: 6-6>
             CONST_INT : 10 	<Line: 6-6>
             RSQUARE : ] 	<Line: 6-6>
            SEMICOLON : ; 	<Line: 6-6>
         statement : var_declaration 	<Line: 7-7>
          var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 7-7>
           type_specifier	: INT 	<Line: 7-7>
            INT : int 	<Line: 7-7>
           declaration_list : ID 	<Line: 7-7>
            ID : m 	<Line: 7-7>
           SEMICOLON : ; 	<Line: 7-7>
        statement : expression_statement 	<Line: 8-8>
         expression_statement 	: expression SEMICOLON 	<Line: 8-8>
          expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
           variable : ID 	<Line: 8-8>
            ID : y 	<Line: 8-8>
           ASSIGNOP : = 	<Line: 8-8>
           logic_expression : rel_expression  	<Line: 8-8>
            rel_expression : simple_expression  	<Line: 8-8>
             simple_expression : term 	<Line: 8-8>
              term : unary_expression 	<Line: 8-8>
               unary_expression : factor 	<Line: 8-8>
                factor  : CONST_INT 	<Line: 8-8>
                 CONST_INT : 2 	<Line: 8-8>
          SEMICOLON : ; 	<Line: 8-8>
       statement : expression_statement 	<Line: 9-9>
        expression_statement 	: expression SEMICOLON 	<Line: 9-9>
         expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
          variable : ID 	<Line: 9-9>
           ID : x 	<Line: 9-9>
          ASSIGNOP : = 	<Line: 9-9>
          logic_expression : rel_expression  	<Line: 9-9>
           rel_expression : simple_expression  	<Line: 9-9>
            simple_expression : term 	<Line: 9-9>
             term : unary_expression 	<Line: 9-9>
              unary_expression : factor 	<Line: 9-9>
               factor  : CONST_INT 	<Line: 9-9>
                CONST_INT : 1 	<Line: 9-9>
         SEMICOLON : ; 	<Line: 9-9>
      RCURL : } 	<Line: 10-10>
  unit : var_declaration  	<Line: 11-11>
   var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 11-11>
    type_specifier	: INT 	<Line: 11-11>
     INT : int 	<Line: 11-11>
    declaration_list : declaration_list COMMA ID 	<Line: 11-11>
     declaration_list : declaration_list COMMA ID 	<Line: 11-11>
      declaration_list : ID 	<Line: 11-11>
       ID : a 	<Line: 11-11>
      COMMA : , 	<Line: 11-11>
      ID : b 	<Line: 11-11>
     COMMA : , 	<Line: 11-11>
     ID : c 	<Line: 11-11>
    SEMICOLON : ; 	<Line: 11-11>
